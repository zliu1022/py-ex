WARNING:tensorflow:From /usr/local/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
2020-01-10 11:40:23.362017: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
input:      (3, 9, 9)
  0   1   2   3   4   5   6   7   8 
  1   2   3   4   5   6   7   8   9 
  2   3   4   5   6   7   8   9  10 
  3   4   5   6   7   8   9  10  11 
  4   5   6   7   8   9  10  11  12 
  5   6   7   8   9  10  11  12  13 
  6   7   8   9  10  11  12  13  14 
  7   8   9  10  11  12  13  14  15 
  8   9  10  11  12  13  14  15  16 


  1   2   3   4   5   6   7   8   9 
  2   3   4   5   6   7   8   9  10 
  3   4   5   6   7   8   9  10  11 
  4   5   6   7   8   9  10  11  12 
  5   6   7   8   9  10  11  12  13 
  6   7   8   9  10  11  12  13  14 
  7   8   9  10  11  12  13  14  15 
  8   9  10  11  12  13  14  15  16 
  9  10  11  12  13  14  15  16  17 


  2   3   4   5   6   7   8   9  10 
  3   4   5   6   7   8   9  10  11 
  4   5   6   7   8   9  10  11  12 
  5   6   7   8   9  10  11  12  13 
  6   7   8   9  10  11  12  13  14 
  7   8   9  10  11  12  13  14  15 
  8   9  10  11  12  13  14  15  16 
  9  10  11  12  13  14  15  16  17 
 10  11  12  13  14  15  16  17  18 


conv_core:      (2, 3, 3, 3)
  0   1   2 
  1   2   3 
  2   3   4 

  1   2   3 
  2   3   4 
  3   4   5 

  2   3   4 
  3   4   5 
  4   5   6 


  1   2   3 
  2   3   4 
  3   4   5 

  2   3   4 
  3   4   5 
  4   5   6 

  3   4   5 
  4   5   6 
  5   6   7 


demo for single np_conv, no pad, the output will shrink
input:       (9, 9)
cc:          (3, 3)
output:      (7, 7)
result, cost 2.140 ms
 [[ 48.  66.  84. 102. 120. 138. 156.]
 [ 66.  84. 102. 120. 138. 156. 174.]
 [ 84. 102. 120. 138. 156. 174. 192.]
 [102. 120. 138. 156. 174. 192. 210.]
 [120. 138. 156. 174. 192. 210. 228.]
 [138. 156. 174. 192. 210. 228. 246.]
 [156. 174. 192. 210. 228. 246. 264.]]

demo for single np_conv, pad 0
input:       (11, 11)
cc:          (3, 3)
output:      (9, 9)
result, cost 0.829 ms
 [[ 14.  28.  43.  58.  73.  88. 103. 118.  66.]
 [ 28.  48.  66.  84. 102. 120. 138. 156.  82.]
 [ 43.  66.  84. 102. 120. 138. 156. 174.  91.]
 [ 58.  84. 102. 120. 138. 156. 174. 192. 100.]
 [ 73. 102. 120. 138. 156. 174. 192. 210. 109.]
 [ 88. 120. 138. 156. 174. 192. 210. 228. 118.]
 [103. 138. 156. 174. 192. 210. 228. 246. 127.]
 [118. 156. 174. 192. 210. 228. 246. 264. 136.]
 [ 66.  82.  91. 100. 109. 118. 127. 136.  62.]]

demo for conv
input:       (3, 9, 9)
cc:          (2, 3, 3, 3)
output:      (2, 9, 9)
result, cost 3.835 ms
 [[[ 110.  186.  249.  312.  375.  438.  501.  564.  338.]
  [ 186.  297.  378.  459.  540.  621.  702.  783.  456.]
  [ 249.  378.  459.  540.  621.  702.  783.  864.  501.]
  [ 312.  459.  540.  621.  702.  783.  864.  945.  546.]
  [ 375.  540.  621.  702.  783.  864.  945. 1026.  591.]
  [ 438.  621.  702.  783.  864.  945. 1026. 1107.  636.]
  [ 501.  702.  783.  864.  945. 1026. 1107. 1188.  681.]
  [ 564.  783.  864.  945. 1026. 1107. 1188. 1269.  726.]
  [ 338.  456.  501.  546.  591.  636.  681.  726.  398.]]

 [[ 134.  231.  312.  393.  474.  555.  636.  717.  446.]
  [ 231.  378.  486.  594.  702.  810.  918. 1026.  627.]
  [ 312.  486.  594.  702.  810.  918. 1026. 1134.  690.]
  [ 393.  594.  702.  810.  918. 1026. 1134. 1242.  753.]
  [ 474.  702.  810.  918. 1026. 1134. 1242. 1350.  816.]
  [ 555.  810.  918. 1026. 1134. 1242. 1350. 1458.  879.]
  [ 636.  918. 1026. 1134. 1242. 1350. 1458. 1566.  942.]
  [ 717. 1026. 1134. 1242. 1350. 1458. 1566. 1674. 1005.]
  [ 446.  627.  690.  753.  816.  879.  942. 1005.  590.]]]
inputs_tf      (1, 9, 9, 3) <class 'numpy.ndarray'>
  0   1   2   3   4   5   6   7   8 
  1   2   3   4   5   6   7   8   9 
  2   3   4   5   6   7   8   9  10 
  3   4   5   6   7   8   9  10  11 
  4   5   6   7   8   9  10  11  12 
  5   6   7   8   9  10  11  12  13 
  6   7   8   9  10  11  12  13  14 
  7   8   9  10  11  12  13  14  15 
  8   9  10  11  12  13  14  15  16 

  1   2   3   4   5   6   7   8   9 
  2   3   4   5   6   7   8   9  10 
  3   4   5   6   7   8   9  10  11 
  4   5   6   7   8   9  10  11  12 
  5   6   7   8   9  10  11  12  13 
  6   7   8   9  10  11  12  13  14 
  7   8   9  10  11  12  13  14  15 
  8   9  10  11  12  13  14  15  16 
  9  10  11  12  13  14  15  16  17 

  2   3   4   5   6   7   8   9  10 
  3   4   5   6   7   8   9  10  11 
  4   5   6   7   8   9  10  11  12 
  5   6   7   8   9  10  11  12  13 
  6   7   8   9  10  11  12  13  14 
  7   8   9  10  11  12  13  14  15 
  8   9  10  11  12  13  14  15  16 
  9  10  11  12  13  14  15  16  17 
 10  11  12  13  14  15  16  17  18 

conv_core_tf      (3, 3, 3, 2) <class 'numpy.ndarray'>
  0   1   2 
  1   2   3 
  2   3   4 

  1   2   3 
  2   3   4 
  3   4   5 

  2   3   4 
  3   4   5 
  4   5   6 


  1   2   3 
  2   3   4 
  3   4   5 

  2   3   4 
  3   4   5 
  4   5   6 

  3   4   5 
  4   5   6 
  5   6   7 


cost 9.017 ms
op_prn      (1, 9, 9, 2) <class 'numpy.ndarray'>
 110  186  249  312  375  438  501  564  338 
 186  297  378  459  540  621  702  783  456 
 249  378  459  540  621  702  783  864  501 
 312  459  540  621  702  783  864  945  546 
 375  540  621  702  783  864  945 1026  591 
 438  621  702  783  864  945 1026 1107  636 
 501  702  783  864  945 1026 1107 1188  681 
 564  783  864  945 1026 1107 1188 1269  726 
 338  456  501  546  591  636  681  726  398 

 134  231  312  393  474  555  636  717  446 
 231  378  486  594  702  810  918 1026  627 
 312  486  594  702  810  918 1026 1134  690 
 393  594  702  810  918 1026 1134 1242  753 
 474  702  810  918 1026 1134 1242 1350  816 
 555  810  918 1026 1134 1242 1350 1458  879 
 636  918 1026 1134 1242 1350 1458 1566  942 
 717 1026 1134 1242 1350 1458 1566 1674 1005 
 446  627  690  753  816  879  942 1005  590 

